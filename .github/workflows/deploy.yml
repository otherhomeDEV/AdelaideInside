name: Deploy to Server

on:
  push:
    branches:
      - main  # 원하는 브랜치를 지정합니다.

jobs:
  Devdeploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Print current directory
      run: pwd

    - name: List files
      run: ls -la
  

    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    - name: Deploy via SCP with password
      run: |
         sshpass -p ${{ secrets.FTP_PASSWORD }} rsync -avz --exclude={'config.php','data'}   -e "ssh -o StrictHostKeyChecking=no" /home/runner/work/test/test/* ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }}:/root/aidev

    - name: Restart Docker container  # Docker 컨테이너를 재시작합니다.
      run: sshpass -p ${{ secrets.FTP_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "docker restart DevAI"
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}  # FTP 서버 주소를 Secrets에서 가져와 환경 변수로 설정합니다.
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}  # FTP 사용자 이름을 Secrets에서 가져와 환경 변수로 설정합니다.
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}  # FTP 비밀번호를 Secrets에서 가져와 환경 변수로 설정합니다.

# 승인 보내기
  production:
    runs-on: ubuntu-latest
    needs : Devdeploy

    environment: production

    steps:
       - uses: actions/checkout@v2
       - run: echo 'production deployment'      

# 상용서버 배포 (추후 상용서버 detail 넣어 연결 해야함 - secrets들 깃허브에 저장도 해야함)
  Prodeploy:
     runs-on: ubuntu-latest
     needs: production
 
     steps:
       - name: Checkout repository
         uses: actions/checkout@v2
 
       - name: Print current directory
         run: pwd
   
       - name: List files
         run: ls -la
       - name: Install sshpass
         run: sudo apt-get install -y sshpass
 
       - name: Deploy via SCP with password
         run: |
           sshpass -p ${{ secrets.FTP_PASSWORD }} rsync -avz --exclude={'config.php','data'} -e "ssh -o StrictHostKeyChecking=no" /home/runner/work/test/test/* ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }}:/root/aidev
 
       - name: Restart Docker container
         run: sshpass -p ${{ secrets.FTP_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "docker restart DevAI"
         env:
           FTP_SERVER: ${{ secrets.FTP_SERVER }}
           FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
           FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}


          
 
   # Slack 승인요청을 보내기
  ReleaseTag:
     runs-on: ubuntu-latest
     needs: Prodeploy

     steps:
      - uses: actions/checkout@v2
      - name: 버전 정보 추출       
        id: version_name
        uses: mathieudutour/github-tag-action@v5.5 # 가져다 쓸 auto tagging 프로그램
        with:
           github_token: ${{ secrets.ACCESS_TOKEN }} # secrets.GITHUB_TOKEN 는 자동생성됨
      - name: Release 생성 
        uses: ncipollo/release-action@v1 
        with: 
           tag: ${{ steps.version_name.outputs.version }} 
           name: ${{ steps.version_name.outputs.version }}
           body: ${{ steps.tag_version.outputs.changelog }}
 
  #approval:
  #  needs: deploy  # deploy 작업이 완료된 후에 approval 작업이 실행
  #  runs-on: ubuntu-latest

    #steps:
    #  - name: Send approval request
    #    uses: varu3/slack-approval@main
    #    env:
    #      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
    #      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    #      SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
    #      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
    #    timeout-minutes: 15
     
    #steps:
    #  - name: Request Approval from kayden
    #    env:
    #      ENVIRONMENT: kayden
    #    run: echo "Asked for approval from $ENVIRONMENT"   

 

    #- name: Send Approval Request 되라
    #  if: always()  # 항상 실행되도록 설정합니다.
    #  uses: 8398a7/action-slack@v3
    #  with:
    #    status: ${{ job.status }}
    #    author_name: www-be
    #    fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
    #    if_mention: failure,cancelled
    #    text: "Deployment to DEV server completed successfully. Please approve deployment to production."
    #    github_token: ${{ secrets.ACCESS_TOKEN}}
    #  env:
    #    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Slack 웹후크 URL 설정
     
