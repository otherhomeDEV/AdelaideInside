name: Deploy to Server

on:
  push:
    branches:
      - main  # 원하는 브랜치를 지정합니다.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Print current directory
      run: pwd

    - name: List files
      run: ls -la
  

    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    - name: Deploy via SCP with password
      run: |
         sshpass -p ${{ secrets.FTP_PASSWORD }} rsync -avz --exclude={'config.php','data'}   -e "ssh -o StrictHostKeyChecking=no" /home/runner/work/AdelaideInside/AdelaideInside/* ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }}:/root/aidev

    - name: Restart Docker container  # Docker 컨테이너를 재시작합니다.
      run: sshpass -p ${{ secrets.FTP_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "docker restart DevAI"
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}  # FTP 서버 주소를 Secrets에서 가져와 환경 변수로 설정합니다.
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}  # FTP 사용자 이름을 Secrets에서 가져와 환경 변수로 설정합니다.
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}  # FTP 비밀번호를 Secrets에서 가져와 환경 변수로 설정합니다.

   # Slack 알림을 보내는 단계 
    - name: Notify Slack
      if: always()  # 항상 실행되도록 설정합니다.
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        author_name: www-be
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        if_mention: failure,cancelled
        text: "Deployment to DEV server completed successfully. Please approve deployment to production."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Slack 웹후크 URL 설정
     
